/routes extraction
MATCH (startNode{group:'covid'}), (endNode{group:'covid'})
WHERE id(startNode) <> id(endNode)
CALL apoc.algo.allSimplePaths(startNode, endNode, '>', 20) YIELD path
WITH startNode,endNode,path,relationships(path) AS rels,nodes(path) as nodePath
WITH 
    [x IN range(0, size(nodePath) + size(rels) - 1) |
        CASE 
            WHEN x % 2 = 0 THEN nodePath[x / 2].id_custom  // Indice per i nodi
            ELSE rels[(x - 1) / 2].numeric_id        // Indice per le relazioni
        END
    ] AS path_sequence,rels,
    path,startNode,endNode
WITH rels,path_sequence,startNode,endNode,
path,size(rels) as pathlength,
size([rel in rels WHERE type(rel) = 'CONC_CHANGE']) AS hopsCon,
size([rel in rels WHERE type(rel) = 'DISC_CHANGE']) AS hopsDisc,
       CASE
           WHEN size([rel in rels WHERE type(rel) = 'DISC_CHANGE']) % 2 = 0 
           THEN 'increasing'
           ELSE 'decreasing'
       END AS pathState
RETURN  startNode.id_custom,endNode.id_custom,path_sequence,
pathlength,pathState